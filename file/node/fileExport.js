"use strict" 
const fs = require('fs');
const path = require('path');
const Readable = require('stream').Readable;

/* 
**
** Require Database Vendors API 
**
*/

const Yadamu = require('../../common/yadamu.js');
const TableWriter = require('./tableWriter.js');

const defaultParameters = {
  BATCHSIZE         : 10000
, COMMITSIZE        : 10000
, IDENTIFIER_CASE   : null
}

/*
**
** YADAMU Database Inteface class skeleton
**
*/

class DBInterface {
    
  get DATABASE_VENDOR() { return 'FILE' };
  get SOFTWARE_VENDOR() { return 'Vendor Long Name' };
  get SPATIAL_FORMAT()  { return 'WKT' };
  
  setConnectionProperties(connectionProperties) {
    this.connectionProperties = connectionProperties
  }

  getConnectionProperties() {
    return {
    }
  }
  
  closeFile() {
        
     const outputStream = this.outputStream;
        
     return new Promise(function(resolve,reject) {
      outputStream.on('finish',function() { resolve() });
      outputStream.close();
    })

  }
  
  isValidDDL() {
    return true;
  }
  
  objectMode() {
     return false;
  }
  
  setSystemInformation(systemInformation) {
    this.outputStream.write(`"systemInformation":${JSON.stringify(systemInformation)}`);
  }

  setMetadata(metadata) {
    this.outputStream.write(',');
    this.outputStream.write(`"metadata":${JSON.stringify(metadata)}`);
  }
  
  constructor(yadamu) {
    this.yadamu = yadamu;
    this.parameters = yadamu.mergeParameters(defaultParameters);
    this.status = yadamu.getStatus()
    this.logWriter = yadamu.getLogWriter();
     
    this.outputStream = undefined;
    this.firstTable = true;
  }

  /*  
  **
  **  Connect to the database. Set global setttings
  **
  */
  
  async initialize() {
    const exportFilePath = path.resolve(this.parameters.FILE);
    this.outputStream = fs.createWriteStream(exportFilePath);
    this.logWriter.write(`${new Date().toISOString()}[FileExport()]: Writing file "${exportFilePath}".\n`)
    this.outputStream.write(`{`)
  }

  /*
  **
  **  Gracefully close down the database connection.
  **
  */

  async finalize() {
  this.outputStream.write('}')    
    await this.closeFile()
  }

  /*
  **
  **  Abort the database connection.
  **
  */

  async abort() {
      
    if (this.oututStream !== undefined) {
      try {
        await this.closeFile()
      } catch (err) {
        this.logWriter.write(`${new Date().toISOString()}[FileExprt()]: Fatal Error:${err.stack}.\n`)
      }
    }
  }

  /*
  **
  ** Commit the current transaction
  **
  */
  
  async commitTransaction() {
  }

  /*
  **
  ** Abort the current transaction
  **
  */
  
  async rollbackTransaction() {
  }
  
  /*
  **
  ** The following methods are used by JSON_TABLE() style import operations  
  **
  */

  /*
  **
  **  Upload a JSON File to the server. Optionally return a handle that can be used to process the file
  **
  */
  
  async uploadFile(importFilePath) {
  }
  
  /*
  **
  **  Process a JSON File that has been uploaded to the server. 
  **
  */

  async processFile(mode,schema,hndl) {
  }
  
  /*
  **
  ** The following methods are used by the YADAMU DBReader class
  **
  */
  
  /*
  **
  **  Generate the SystemInformation object for an Export operation
  **
  */
  
  async getSystemInformation(schema,EXPORT_VERSION) {     
  }

  /*
  **
  **  Generate a set of DDL operations from the metadata generated by an Export operation
  **
  */

  async getDDLOperations(schema) {
    return []
  }
  
  async getSchemaInfo(schema) {
    return null
  }

  generateMetadata(tableInfo,server) {    
  }
   
  generateSelectStatement(tableMetadata) {
     return tableMetadata;
  }   

  createParser(query,objectMode) {
    return new DBParser(query,objectMode,this.logWriter);      
  }
  
  async getInputStream(query,parser) {
  }      

  /*
  **
  ** The following methods are used by the YADAMU DBwriter class
  **
  */
  
  async initializeDataLoad(databaseVendor) {
    this.outputStream.write(',');
    this.outputStream.write('"data":{');
      
  }
  
  async executeDDL(schema, ddl) {
    this.outputStream.write(',');
    this.outputStream.write(`"ddl":${JSON.stringify(ddl)}`);
  }

  async generateStatementCache(schema,ddlRequired) {
  }

  getTableWriter(schema,tableName) {

  if (this.firstTable === true) {
      this.firstTable = false
    }
    else {
      this.outputStream.write(',');
    }

    return new TableWriter(tableName,this.outputStream);      
  }
  
  async finalizeDataLoad() {
  this.outputStream.write('}');
  }  

}

module.exports = DBInterface
