/*
**
** MySQL JSON_IMPORT Function.
**
*/
SET SESSION SQL_MODE=ANSI_QUOTES;
--
DROP FUNCTION IF EXISTS MAP_FOREIGN_DATAYPES;
--
DELIMITER $$
--
CREATE FUNCTION MAP_FOREIGN_DATAYPES(P_DATA_TYPE VARCHAR(128), P_SIZE_CONSTRAINT VARCHAR(128)) 
RETURNS VARCHAR(128) DETERMINISTIC
BEGIN
  DECLARE  V_DATA_TYPE  VARCHAR(128);

  SET V_DATA_TYPE := P_DATA_TYPE;

  case V_DATA_TYPE
	when 'VARCHAR' 
	  then return concat('VARCHAR(',P_SIZE_CONSTRAINT,')');
	when 'VARCHAR2' 
	  then return concat('VARCHAR(',P_SIZE_CONSTRAINT,')');
	when 'NUMBER'
      then return concat('DECIMAL(',P_SIZE_CONSTRAINT,')');
	when 'DECIMAL'
      then return concat('DECIMAL(',P_SIZE_CONSTRAINT,')');
	when 'RAW'
      then return concat('VARCHAR(',P_SIZE_CONSTRAINT,')');
	when 'NVARCHAR2'
	  then return concat('VARCHAR(',P_SIZE_CONSTRAINT,')');
	when 'CLOB'
      then return 'TEXT';
	when 'NCLOB'
      then return 'TEXT';
	when 'BFILE'
      then return 'VARCHAR(256)';
	when 'ROWID'
      then return 'VARCHAR(32)';
	else
   	  if (instr(V_DATA_TYPE,'TIME ZONE') > 0) then
	    return 'TIMESTAMP';	
      end if;
	  if (INSTR(V_DATA_TYPE,'"."') > 0) then 
	    return 'TEXT';
	  end if;
   	  if ((instr(V_DATA_TYPE,'INTERVAL') = 1)) then
	    return 'VARCHAR(16)';
      end if;
	  return V_DATA_TYPE;
  end case;
end;
$$
--
DELIMITER ;
--
DROP FUNCTION IF EXISTS GENERATE_COLUMN_PATTERNS;
--
DELIMITER $$
--
CREATE FUNCTION GENERATE_COLUMN_PATTERNS(P_COLUMN_LIST TEXT,P_DATA_TYPE_LIST TEXT,P_DATA_SIZE_LIST TEXT) 
RETURNS TEXT DETERMINISTIC
BEGIN
  DECLARE V_COLUMN_PATTERN    VARCHAR(4096);
  DECLARE V_COLUMN_PATTERNS   TEXT DEFAULT '';
  DECLARE V_COLUMN_ARRAY      JSON;
  DECLARE V_DATA_TYPE_ARRAY   JSON;
  DECLARE V_DATA_SIZE_ARRAY   JSON;
  DECLARE I                   INT DEFAULT 0;
  DECLARE V_INDEX             VARCHAR(10); 

  SET V_COLUMN_ARRAY = CONCAT('[',REPLACE(P_COLUMN_LIST,'"."','\\".\\"'),']');  
  SET V_DATA_TYPE_ARRAY = CONCAT('[',REPLACE(P_DATA_TYPE_LIST,'"."','\\".\\"'),']');  
  SET V_DATA_SIZE_ARRAY = CONCAT('[',REPLACE(P_DATA_SIZE_LIST,'"."','\\".\\"'),']');  
  
  WHILE I < JSON_LENGTH(V_COLUMN_ARRAY) DO
	if (i = 0) then
	  SET V_COLUMN_PATTERN = '       ';
    else
	  SET V_COLUMN_PATTERN = '      ,';
    end if;
    SET V_INDEX := CONCAT('$[',I,']');
    SET V_COLUMN_PATTERNS = CONCAT(V_COLUMN_PATTERNS,V_COLUMN_PATTERN,'"',JSON_UNQUOTE(JSON_EXTRACT(V_COLUMN_ARRAY,V_INDEX)),'" ',MAP_FOREIGN_DATAYPES(JSON_UNQUOTE(JSON_EXTRACT(V_DATA_TYPE_ARRAY,V_INDEX)),JSON_UNQUOTE(JSON_EXTRACT(V_DATA_SIZE_ARRAY,V_INDEX))),' PATH ''',V_INDEX,'''');
    SET I = I + 1;
  END WHILE;

  RETURN V_COLUMN_PATTERNS;
END;
$$
--
DELIMITER ;
--
DROP FUNCTION IF EXISTS GENERATE_TABLE_COLUMNS;
--
DELIMITER $$
--
CREATE FUNCTION GENERATE_TABLE_COLUMNS(P_COLUMN_LIST TEXT,P_DATA_TYPE_LIST TEXT,P_DATA_SIZE_LIST TEXT) 
RETURNS TEXT DETERMINISTIC
BEGIN
  DECLARE V_COLUMN_PATTERN    VARCHAR(4096);
  DECLARE V_COLUMN_PATTERNS   TEXT DEFAULT '';
  DECLARE V_COLUMN_ARRAY      JSON;
  DECLARE V_DATA_TYPE_ARRAY   JSON;
  DECLARE V_DATA_SIZE_ARRAY   JSON;
  DECLARE I                   INT DEFAULT 0;
  DECLARE V_INDEX             VARCHAR(10); 
  
  SET V_COLUMN_ARRAY = CONCAT('[',REPLACE(P_COLUMN_LIST,'"."','\\".\\"'),']');   
  SET V_DATA_TYPE_ARRAY = CONCAT('[',REPLACE(P_DATA_TYPE_LIST,'"."','\\".\\"'),']');  
  SET V_DATA_SIZE_ARRAY = CONCAT('[',REPLACE(P_DATA_SIZE_LIST,'"."','\\".\\"'),']');  
  
  WHILE I < JSON_LENGTH(V_COLUMN_ARRAY) DO
	if (i = 0) then
	  SET V_COLUMN_PATTERN = '       ';
    else
	  SET V_COLUMN_PATTERN = '      ,';
    end if;
    SET V_INDEX := CONCAT('$[',I,']');
    SET V_COLUMN_PATTERNS = CONCAT(V_COLUMN_PATTERNS,V_COLUMN_PATTERN,'"',JSON_UNQUOTE(JSON_EXTRACT(V_COLUMN_ARRAY,V_INDEX)),'" ',MAP_FOREIGN_DATAYPES(JSON_UNQUOTE(JSON_EXTRACT(V_DATA_TYPE_ARRAY,V_INDEX)),JSON_UNQUOTE(JSON_EXTRACT(V_DATA_SIZE_ARRAY,V_INDEX))));
    SET I = I + 1;
  END WHILE;

  RETURN V_COLUMN_PATTERNS;
END;
$$
--
DELIMITER ;
--
DROP PROCEDURE IF EXISTS IMPORT_JSON;
--
DELIMITER $$
--
CREATE PROCEDURE IMPORT_JSON(P_TARGET_DATABASE VARCHAR(128), OUT P_RESULTS JSON) 
BEGIN
  DECLARE NO_MORE_ROWS    INT DEFAULT FALSE;
  
  DECLARE V_OWNER         VARCHAR(128);
  DECLARE V_TABLE_NAME    VARCHAR(128);
  DECLARE V_STATEMENT     TEXT;
  DECLARE V_DDL_STATEMENT TEXT;
  DECLARE V_DML_STATEMENT TEXT;
  
  DECLARE V_START_TIME    BIGINT;
  DECLARE V_END_TIME      BIGINT;
  DECLARE V_ELAPSED_TIME  BIGINT;
  
  DECLARE V_ROW_COUNT     BIGINT;
  
  DECLARE V_SQLSTATE      INT;
  DECLARE V_SQLERRM       TEXT;
  
  DECLARE GENERATE_STATEMENTS 
  CURSOR FOR 
  select OWNER
        ,TABLE_NAME
        ,concat('create table if not exists "',P_TARGET_DATABASE,'"."',TABLE_NAME,'" (',GENERATE_TABLE_COLUMNS(SELECT_LIST,DATA_TYPE_LIST,SIZE_CONSTRAINTS),')') "DDL_STATEMENT"
        ,concat('insert into "',P_TARGET_DATABASE,'"."',TABLE_NAME,'" (',SELECT_LIST,') select ',SELECT_LIST,'  from "JSON_STAGING",JSON_TABLE(DATA,''$.data."',TABLE_NAME,'"[*]'' COLUMNS(',GENERATE_COLUMN_PATTERNS(SELECT_LIST,DATA_TYPE_LIST,SIZE_CONSTRAINTS),')) data') "DML_STATEMENT"
    from JSON_STAGING,
	     JSON_TABLE(
	       DATA,
			'$.metadata.*' 
		 	COLUMNS (
			  OWNER                        VARCHAR(128) PATH '$.owner'
			 ,TABLE_NAME                   VARCHAR(128) PATH '$.tableName'
			 ,SELECT_LIST                          TEXT PATH '$.columns'
			 ,DATA_TYPE_LIST                       TEXT PATH '$.dataTypes'
			 ,SIZE_CONSTRAINTS                     TEXT PATH '$.dataTypeSizing'
			 ,INSERT_SELECT_LIST                   TEXT PATH '$.insertSelectList'
             ,COLUMN_PATTERNS                      TEXT PATH '$.columnPatterns'
		  )) c;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET NO_MORE_ROWS = TRUE;
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  BEGIN 
    GET DIAGNOSTICS CONDITION 1
        V_SQLSTATE = RETURNED_SQLSTATE, V_SQLERRM = MESSAGE_TEXT;
	SET P_RESULTS = JSON_ARRAY_APPEND(P_RESULTS,'$',JSON_OBJECT('error',JSON_OBJECT('tableName', V_TABLE_NAME,'sqlStatement', V_STATEMENT, 'code', V_SQLSTATE, 'msg', V_SQLERRM, 'details', 'unavailable' )));
  END;  

  SET SESSION SQL_MODE=ANSI_QUOTES;

  SET P_RESULTS = '[]';
  SET NO_MORE_ROWS = FALSE;
  OPEN GENERATE_STATEMENTS;
  	
  PROCESS_TABLE : LOOP
	FETCH GENERATE_STATEMENTS INTO V_OWNER, V_TABLE_NAME, V_DDL_STATEMENT, V_DML_STATEMENT;
    IF NO_MORE_ROWS THEN
      LEAVE PROCESS_TABLE;
    END IF;
    
    SET V_STATEMENT = V_DDL_STATEMENT;
	SET @SQL_STATEMENT = V_STATEMENT;
    PREPARE STATEMENT FROM @SQL_STATEMENT;
    EXECUTE STATEMENT;
    DEALLOCATE PREPARE STATEMENT;
	SET P_RESULTS = JSON_ARRAY_APPEND(P_RESULTS,'$',JSON_OBJECT('ddl',JSON_OBJECT('tableName', V_TABLE_NAME,'sqlStatement', V_STATEMENT)));
    
    SET V_STATEMENT = V_DML_STATEMENT;
	SET @SQL_STATEMENT = V_STATEMENT;
    PREPARE STATEMENT FROM @SQL_STATEMENT;
	SET V_START_TIME = floor(unix_timestamp(current_timestamp(3)) * 1000);
    EXECUTE STATEMENT;
	SET V_ROW_COUNT = ROW_COUNT();
	SET V_END_TIME =floor(unix_timestamp(current_timestamp(3)) * 1000);
    DEALLOCATE PREPARE STATEMENT;
   
	SET V_ELAPSED_TIME = V_END_TIME - V_START_TIME;
	SET P_RESULTS = JSON_ARRAY_APPEND(P_RESULTS,'$',JSON_OBJECT('dml',JSON_OBJECT('tableName', V_TABLE_NAME, 'rowCount', V_ROW_COUNT, 'elapsedTime', V_ELAPSED_TIME, 'sqlStatement', V_STATEMENT)));
  END LOOP;
 
  CLOSE GENERATE_STATEMENTS;
end;
$$
--
DELIMITER ;

--
