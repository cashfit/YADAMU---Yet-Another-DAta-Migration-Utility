"use strict" 
const fs = require('fs');
const Readable = require('stream').Readable;

/* 
**
** Require Database Vendors API 
**
*/

const Yadamu = require('../../common/yadamu.js');
const DBParser = require('../../common/dbParser.js');
const TableWriter = require('./tableWriter.js');
const StatementGenerator = require('./statementGenerator.js');

const defaultParameters = {
  BATCHSIZE         : 10000
, COMMITSIZE        : 10000
, IDENTIFIER_CASE   : null
}

/*
**
** YADAMU Database Inteface class skeleton
**
*/

class DBInterface {
    
  get DATABASE_VENDOR() { return 'Vendor Short Name' };
  get SOFTWARE_VENDOR() { return 'Vendor Long Name' };
  get SPATIAL_FORMAT()  { return 'WKT' };
  
  setConnectionProperties(connectionProperties) {
    this.connectionProperties = connectionProperties
  }

  getConnectionProperties() {
    return {
    }
  }
  
  constructor(yadamu) {
    this.yadamu = yadamu;
    this.parameters = yadamu.mergeDefaultParameters(defaultParameters);
    this.status = yadamu.getStatus()
    this.logWriter = yadamu.getLogWriter();
     
    this.conn = undefined;
    this.connectionProperties = this.getConnectionProperties()       

    this.statementCache = undefined;

    this.tableName  = undefined;
    this.tableInfo  = undefined;
    this.insertMode = 'Empty';
    this.skipTable = true;

  }

  /*  
  **
  **  Connect to the database. Set global setttings
  **
  */
  
  async initialize() {
  }

  /*
  **
  **  Gracefully close down the database connection.
  **
  */

  async finalize() {
  }

  /*
  **
  **  Abort the database connection.
  **
  */

  async abort() {
  }

  /*
  **
  ** Commit the current transaction
  **
  */
  
  async commitTransaction() {
  }

  /*
  **
  ** Abort the current transaction
  **
  */
  
  async rollbackTransaction() {
  }
  
  /*
  **
  ** The following methods are used by JSON_TABLE() style import operations  
  **
  */

  /*
  **
  **  Upload a JSON File to the server. Optionally return a handle that can be used to process the file
  **
  */
  
  async uploadFile(importFilePath) {
  }
  
  /*
  **
  **  Process a JSON File that has been uploaded to the server. 
  **
  */

  async processFile(mode,schema,hndl) {
  }
  
  /*
  **
  ** The following methods are used by the YADAMU DBReader class
  **
  */
  
  /*
  **
  **  Generate the SystemInformation object for an Export operation
  **
  */
  
  async getSystemInformation(schema,EXPORT_VERSION) {     
  }

  /*
  **
  **  Generate a set of DDL operations from the metadata generated by an Export operation
  **
  */

  async getDDLOperations(schema) {
    return []
  }
  
  async getTableInfo(schema) {
  }

  generateMetadata(tableInfo,server) {    
  }
   
  generateSelectStatement(tableMetadata) {
     return tableMetadata;
  }   

  createParser(query,objectMode) {
    return new DBParser(query,objectMode,this.logWriter);      
  }
  
  async getInputStream(query,parser) {
  }      

  /*
  **
  ** The following methods are used by the YADAMU DBwriter class
  **
  */
  
  async initializeDataLoad(databaseVendor) {
  }
  
  async executeDDL(schema, systemInformation, ddl) {
  }

  async generateStatementCache(schema,systemInformation,metadata,ddlRequired) {
    const statementGenerator = new StatementGenerator(this,ddlRequired,this.parameters.BATCHSIZE,this.parameters.COMMITSIZE,this.status,this.logWriter);
    this.statementCache = await statementGenerator.generateStatementCache(schema,systemInformation,metadata)
  }

  getTableWriter(schema,tableName) {
    return new TableWriter(this,schema,tableName,this.statementCache[tableName],this.status,this.logWriter);      
  }
  
  async finalizeDataLoad() {
  }  

}

module.exports = DBInterface
