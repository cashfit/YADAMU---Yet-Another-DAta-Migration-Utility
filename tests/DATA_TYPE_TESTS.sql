set echo on
spool logs/DATA_TYPE_TESTS.log
--
drop table BUILTIN_DATATYPE_TEST
/
create table BUILTIN_DATATYPE_TEST (
    CHAR_BYTE_COLUMN                CHAR(16 BYTE)
   ,CHAR_CHAR_COLUMN                CHAR(16 CHAR)
   ,VARCHAR2_BYTE_COLUMN            VARCHAR2(16 BYTE)
   ,VARCHAR2_CHAR_COLUMN            VARCHAR2(16 CHAR)
   ,NCHAR_COLUMN                    NCHAR(16)
   ,NVARCHAR_COLUMN                 NVARCHAR2(16)
   ,NUMBER_COLUMN                   NUMBER
   ,NUMBER_PRECISION_COLUMN         NUMBER(16)
   ,NUMBER_PRECISION_SCALE_COLUMN   NUMBER(16,4)
   ,BINARY_FLOAT_COLUMN             BINARY_FLOAT
   ,BINARY_DOUBLE_COLUMN            BINARY_DOUBLE
   ,LONG_COLUMN                     LONG
   -- ,LONG_RAW_COLUMN                 LONG RAW
   ,RAW_COLUMN                      RAW(16)
   ,DATE_COLUMN                     DATE
   ,TIMESTAMP_COLUMM                TIMESTAMP
   ,TIMESTAMP_FS_COLUMN             TIMESTAMP(6)
   ,TIMESTAMP_TZ_COLUMN             TIMESTAMP WITH TIME ZONE
   ,TIMESTAMP_FS_TZ_COLUMN          TIMESTAMP(6) WITH TIME ZONE
   ,TIMESTAMP_LTZ_COLUMN            TIMESTAMP WITH LOCAL TIME ZONE
   ,TIMESTAMP_FS_LTZ_COLUMN         TIMESTAMP(6) WITH LOCAL TIME ZONE
   ,INTERVAL_YTM_COLUMN             INTERVAL YEAR TO MONTH
   ,INTERVAL_YTM_YP_COLUMN          INTERVAL YEAR (4) TO MONTH
   ,INTERVAL_DTS_COLUMN             INTERVAL DAY TO SECOND
   ,INTERVAL_DTS_DS_COLUMN          INTERVAL DAY(4)  TO SECOND
   ,INTERVAL_DTS_FS_COLUMN          INTERVAL DAY TO SECOND(6)
   ,INTERVAL_DTS_DS_FS_COLUMN       INTERVAL DAY(4)  TO SECOND(6)
   ,BLOB_COLUMN                     BLOB
   ,CLOB_COLUMN                     CLOB
   ,NCLOB_COLUMN                    NCLOB
   ,BFILE_COLUMN                    BFILE
   ,ROWID_COLUMN                    ROWID
   ,UROWID_COLUMN                   UROWID
   ,UROWID_SIZE_COLUMN              UROWID(6)
   ,XML_COLUMN                      XMLTYPE
)
/
insert into BUILTIN_DATATYPE_TEST values (
  'AAA',
  'BBB',
  'CCC',
  'DDD',
  'EEE',
  'FFF',
  123,
  234,
  345.678,
  456.789,
  567,
  'Now is the time for all good men to come to the aid of the party',
  HEXTORAW('0A0D'),
  SYSDATE,
  SYSTIMESTAMP,
  SYSTIMESTAMP,
  SYSTIMESTAMP,
  SYSTIMESTAMP,
  SYSTIMESTAMP,
  SYSTIMESTAMP,
  INTERVAL '1-2' YEAR TO MONTH,
  INTERVAL '2-3' YEAR TO MONTH,
  INTERVAL '3 4' DAY TO HOUR,
  INTERVAL '4 5' DAY TO HOUR,
  INTERVAL '5 6' DAY TO HOUR,
  INTERVAL '6 7' DAY TO HOUR,
  UTL_RAW.CAST_TO_RAW('Mary had a little lamb'),
  'Hickory Dickory Dock',
  'One, Two, Three, Four Five',
  BFILENAME('MYDIR','myfile.txt'),
  (select ROWID from dual),
  (select ROWID from dual),
  null, -- (select ROWID from dual),
  XMLTYPE('<MyXML/>')
)
/
COMMIT
/
select *
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(CHAR_BYTE_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(CHAR_CHAR_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(VARCHAR2_BYTE_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(VARCHAR2_CHAR_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(NCHAR_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(NVARCHAR_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(NUMBER_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(NUMBER_PRECISION_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(NUMBER_PRECISION_SCALE_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(BINARY_FLOAT_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(BINARY_DOUBLE_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(RAW_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(DATE_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(TIMESTAMP_COLUMM)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(TIMESTAMP_FS_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(TIMESTAMP_TZ_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(TIMESTAMP_FS_TZ_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(TIMESTAMP_LTZ_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(TIMESTAMP_FS_LTZ_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(INTERVAL_YTM_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(INTERVAL_YTM_YP_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(INTERVAL_DTS_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(INTERVAL_DTS_DS_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(INTERVAL_DTS_FS_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(INTERVAL_DTS_DS_FS_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(BLOB_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(CLOB_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(NCLOB_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(NCLOB_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(BFILE_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(ROWID_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(UROWID_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(XML_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(LONG_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(LONG_RAW_COLUMN)
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(TO_CHAR(BINARY_FLOAT_COLUMN))
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(TO_CHAR(BINARY_DOUBLE_COLUMN))
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(TO_CHAR(TIMESTAMP_LTZ_COLUMN))
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(TO_CHAR(TIMESTAMP_FS_LTZ_COLUMN))
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(TO_CHAR(INTERVAL_YTM_YP_COLUMN))
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(TO_CHAR(INTERVAL_DTS_COLUMN))
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(TO_CHAR(INTERVAL_DTS_DS_COLUMN))
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(TO_CHAR(INTERVAL_DTS_FS_COLUMN))
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(TO_CHAR(INTERVAL_DTS_DS_FS_COLUMN))
  from BUILTIN_DATATYPE_TEST
/
SELECT JSON_ARRAY(
       'P' || CASE WHEN extract(DAY FROM INTERVAL_DTS_COLUMN) <> 0 THEN extract(DAY FROM INTERVAL_DTS_COLUMN) || 'D'  ELSE NULL END
    || 'T' || CASE WHEN extract(HOUR FROM INTERVAL_DTS_COLUMN) <> 0 THEN extract(HOUR FROM INTERVAL_DTS_COLUMN) ||  'H' END
	|| CASE WHEN extract(MINUTE FROM INTERVAL_DTS_COLUMN) <> 0 THEN extract(MINUTE FROM INTERVAL_DTS_COLUMN) || 'M' end 
	|| CASE WHEN extract(SECOND FROM INTERVAL_DTS_COLUMN) <> 0 THEN extract(SECOND FROM INTERVAL_DTS_COLUMN) ||  'S' end
	   )
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(ROWIDTOCHAR(ROWID_COLUMN))
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(ROWIDTOCHAR(UROWID_COLUMN))
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(XMLSERIALIZE(CONTENT XML_COLUMN as CLOB))
  from BUILTIN_DATATYPE_TEST
/
select JSON_ARRAY(TO_CHAR(LONG_COLUMN))
  from BUILTIN_DATATYPE_TEST
/
WITH
FUNCTION BFILE2JSON(P_BFILE BFILE)
return VARCHAR2
AS
  V_DIRNAME VARCHAR2(128);
  V_FILENAME VARCHAR2(128);
begin
  DBMS_LOB.FILEGETNAME(P_BFILE,V_DIRNAME,V_FILENAME);
  return JSON_OBJECT('Directory' value V_DIRNAME,'File' value V_FILENAME);
end;
select JSON_ARRAY(BFILE2JSON(BFILE_COLUMN))
  from BUILTIN_DATATYPE_TEST
/
select JSON_DOCUMENT from TABLE(JSON_EXPORT.EXPORT_SCHEMA(USER,'BUILTIN_DATATYPE_TEST'))
/
select JSON_EXPORT.GET_SQL_BUFFER SQL_STATEMENT
  from DUAL
/
spool off