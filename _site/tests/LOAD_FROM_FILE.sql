set echo on
spool logs/LOAD_FROM_FILE.log
--
def JSON_DIR = &1
--
def FILENAME = &2
--
VAR JSON CLOB
--
create or replace directory JSON_DIR as '&JSON_DIR'
/
DECLARE
  V_DEST_OFFSET NUMBER := 1;
  V_SRC_OFFSET  NUMBER := 1;
  V_CONTEXT     NUMBER := 0;
  V_WARNINGS    NUMBER := 0;
  V_BFILE	     BFILE := BFILENAME('JSON_DIR','&FILENAME');
begin
  DBMS_LOB.createTemporary(:JSON,TRUE,DBMS_LOB.SESSION);
  DBMS_LOB.FILEOPEN(V_BFILE,DBMS_LOB.FILE_READONLY);
  DBMS_LOB.LOADCLOBFROMFILE (:JSON,V_BFILE,DBMS_LOB.LOBMAXSIZE,V_DEST_OFFSET,V_SRC_OFFSET,NLS_CHARSET_ID('AL32UTF8'),V_CONTEXT,V_WARNINGS);
  DBMS_LOB.FILECLOSE(V_BFILE);
end;
/
select 1
	from DUAL
  where :JSON IS JSON
/
def SCHEMA = PM
--
exec JSON_IMPORT.IMPORT_JSON(:JSON,'&SCHEMA.1');
--
column SQL_STATEMENT format A256
set pages 0 lines 256 long 100000000 trimspool on
--
select SQL_STATEMENT
  from TABLE(JSON_IMPORT.SQL_OPERATIONS)
/
nsert /*+ WITH_PLSQL */ into "PRINT_MEDIA"("PRODUCT_ID","AD_ID","AD_COMPOSITE","AD_SOURCETEXT","AD_FINALTEXT","AD_FLTEXTN","AD_PHOTO","AD_GRAPHIC","AD_HEADER")
WITH
function CHAR2BFILE(P_SERIALIZATION VARCHAR2) return BFILE
as
  V_BFILE BFILE;
begin
  EXECUTE IMMEDIATE 'select ' || P_SERIALIZATION || ' from dual' into V_BFILE;
  return V_BFILE;
end;
function HEXBINARY2BLOB(P_SERIALIZATION CLOB)
return BLOB
is
  V_BLOB BLOB;
  V_OFFSET INTEGER := 1;
  V_AMOUNT INTEGER := 32000;
  V_INPUT_LENGTH NUMBER := DBMS_LOB.GETLENGTH(P_SERIALIZATION);
  V_HEXBINARY_DATA VARCHAR2(32000);
begin
  if (DBMS_LOB.substr(P_SERIALIZATION,8,1) = 'OVERFLOW') then return NULL; end if;
  DBMS_LOB.CREATETEMPORARY(V_BLOB,TRUE,DBMS_LOB.CALL);
  while (V_OFFSET <= V_INPUT_LENGTH) loop
    V_AMOUNT := 32000;
    DBMS_LOB.READ(P_SERIALIZATION,V_AMOUNT,V_OFFSET,V_HEXBINARY_DATA);
	   V_OFFSET := V_OFFSET + V_AMOUNT;
    DBMS_LOB.APPEND(V_BLOB,TO_BLOB(HEXTORAW(V_HEXBINARY_DATA)));
  end loop;
  return V_BLOB;
end;
function "#ADHEADER_TYP"(P_SERIALIZATION CLOB)
return "ADHEADER_TYP"
as
  TYPE T_CURSOR is REF CURSOR;
  V_CURSOR      T_CURSOR;
  V_OBJECT "ADHEADER_TYP";
  V_STATEMENT CLOB;
begin
  if (P_SERIALIZATION is NULL) then return NULL; end if;
  DBMS_LOB.CREATETEMPORARY(V_STATEMENT,TRUE,DBMS_LOB.CALL);
  DBMS_LOB.APPEND(V_STATEMENT,TO_CLOB('SELECT '));
  DBMS_LOB.APPEND(V_STATEMENT,P_SERIALIZATION);
  DBMS_LOB.APPEND(V_STATEMENT,TO_CLOB(' FROM DUAL'));  
    
  OPEN V_CURSOR for  V_STATEMENT;
  FETCH V_CURSOR into V_OBJECT;
  CLOSE V_CURSOR;
  return V_OBJECT;
end;
select "PRODUCT_ID","AD_ID","AD_COMPOSITE","AD_SOURCETEXT","AD_FINALTEXT","AD_FLTEXTN","AD_PHOTO",case when "AD_GRAPHIC" is NULL then NULL else CHAR2BFILE("AD_GRAPHIC") end,"#ADHEADER_TYP"("AD_HEADER")
  from JSON_TABLE(
	 :JSON,
	 '$.data."PRINT_MEDIA"[*]'
	 COLUMNS(
"PRODUCT_ID" NUMBER PATH '$[0]',"AD_ID" NUMBER PATH '$[1]',"AD_COMPOSITE" CLOB PATH '$[2]',"AD_SOURCETEXT" CLOB PATH '$[3]',"AD_FINALTEXT" CLOB PATH '$[4]',"AD_FLTEXTN" CLOB PATH '$[5]',"AD_PHOTO" CLOB PATH '$[6]',"AD_GRAPHIC" VARCHAR2 PATH '$[7]',"AD_HEADER" CLOB PATH '$[8]'
))


